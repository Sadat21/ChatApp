{"version":3,"sources":["components/App/App.styles.ts","utils/SocketUtil.ts","redux/models/User.tsx","redux/actions/UserActions.ts","redux/actions/OnlineUsersActions.ts","redux/actions/MessageActions.ts","redux/actions/ErrorActions.ts","containers/SocketContainer.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx","redux/combindedReducer.ts","redux/reducers/UserReducer.ts","redux/reducers/OnlineUsersReducer.ts","redux/reducers/MessageReducer.ts","redux/reducers/ErrorReducer.ts"],"names":["Content","styled","div","InputText","TextField","StyledButton","Button","TopGrid","Grid","Footer","List","Paper","InverseList","Outside","Title","Typography","Loading","socketObj","ENDPOINT","socket","this","socketIOClient","sendUserConnect","cookie","Cookies","get","username","emit","message","colour","User","nickname","USER_ACTION_CONSTANTS","ONLINE_USERS_ACTION_CONSTANTS","MESSAGE_ACTION_CONSTANTS","ERROR_ACTION_CONSTANTS","SocketContainer","dispatch","useDispatch","mySocket","useEffect","on","type","messages","users","user","msg","set","updateMessageAction","error_msg","error","App","currentUser","useSelector","state","userReducer","onlineUsers","onlineUserReducer","Array","from","messageReducer","reverse","errorMessage","errorReducer","useState","dialogMessage","setDialogMessage","setMessage","window","innerWidth","isMobileSize","setIsMobileSize","isDialogOpen","setIsDialogOpen","sendMessage","trim","split","sendColourChange","sendUserNameChange","updateWindowSize","addEventListener","removeEventListener","animateScroll","scrollToBottom","containerId","smooth","duration","isDynamic","length","connected","Fragment","Dialog","open","DialogContent","DialogContentText","DialogActions","onClick","color","variant","container","item","xs","sm","md","elevation","ListItem","ListItemAvatar","Avatar","style","backgroundColor","ListItemText","primary","map","index","key","toUpperCase","id","value","alignItems","textAlign","secondary","Date","timestamp","toLocaleString","component","onChange","event","target","onKeyPress","placeholder","CircularProgress","Boolean","location","hostname","match","Component","reducer","combineReducers","action","loggerMiddleware","createLogger","collapsed","getState","logEntry","predicate","diff","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"62DAGO,IAAMA,EAAUC,IAAOC,IAAV,KAOPC,EAAYF,YAAOG,IAAPH,CAAH,KAKTI,EAAeJ,YAAOK,IAAPL,CAAH,KAKZM,EAAUN,YAAOO,IAAPP,CAAH,KAKPQ,EAASR,YAAOO,IAAPP,CAAH,KAKNS,EAAOT,YAAOU,IAAPV,CAAH,KASJW,EAAcX,IAAOC,IAAV,KAMXW,EAAUZ,YAAOU,IAAPV,CAAH,KAWPa,EAAQb,YAAOc,IAAPd,CAAH,KAILe,EAAUf,IAAOC,IAAV,K,oJCzBPe,EAAY,IAhCzB,WAIE,aAAe,yBAHPC,SAAW,oCAGL,KAFPC,YAEO,EACZC,KAAKD,OAASE,IAAeD,KAAKF,UAClCE,KAAKE,kBANT,8DAUI,IAAMC,EAASC,IAAQC,IAAI,QACvBC,EAAW,GACXH,IACFG,EAAWH,GAGbH,KAAKD,OAAOQ,KAAK,eAAgBD,KAhBrC,kCAmBqBE,GACjBR,KAAKD,OAAOQ,KAAK,UAAWC,KApBhC,yCAuB4BF,GACxBN,KAAKD,OAAOQ,KAAK,kBAAmBD,KAxBxC,uCA2B0BG,GACtBT,KAAKD,OAAOQ,KAAK,qBAAsBE,OA5B3C,M,QCHaC,GAAb,sCACEC,SAAmB,GADrB,KAEEF,OAAiB,ICCNG,GACE,cADFA,GAEC,aCFP,IAAMC,GACU,sBADVA,GAES,qBCFf,IAAMC,GACM,kBADNA,GAEK,iBCHX,IAAMC,GACG,eADHA,GAEE,cCgBR,IAAMC,GAAkB,WAC7B,IAAMC,EAAWC,cAEXC,EAAWtB,EAAUE,OA+B3B,OA7BAqB,qBAAU,WACRD,EAASE,GAAG,aAAa,WACvBxB,EAAUK,qBAGZiB,EAASE,GAAG,cAAc,WACxBJ,EFXG,CACLK,KAAMR,GACNS,SAAU,KEURN,EHZG,CACLK,KAAMT,GACNW,MAAO,KGWLP,EJbG,CACLK,KAAMV,GACNa,KAAM,IAAIf,QIcVS,EAASE,GAAG,iBAAiB,SAACK,GAC5BtB,IAAQuB,IAAI,OAAQD,EAAIf,UACxBM,EJzBG,CACLK,KAAMV,GACNa,KIuB4BC,OAG5BP,EAASE,GAAG,eAAe,SAACK,GAC1BT,EH7BG,CACLK,KAAMT,GACNW,MG2BmCE,OAGnCP,EAASE,GAAG,WAAW,SAACE,GACtBN,EFlCC,SAA6BM,GAClC,MAAO,CACLD,KAAMR,GACNS,SAAUA,GE+BCK,CAAoBL,OAG/BJ,EAASE,GAAG,aAAa,SAACQ,GACxBZ,EDtCG,CACLK,KAAMP,GACNe,MCoC6BD,SAE5B,CAACZ,EAAUE,IAEP,+B,SC+LMY,OA1Nf,WACE,IAAMd,EAAWC,cAEXc,EAAoBC,aAAY,SAACC,GACrC,OAAOA,EAAMC,eAGTC,EAAcH,aAAY,SAACC,GAC/B,OAAOA,EAAMG,qBAGTd,EAAWU,aAAY,SAACC,GAC5B,OAAOI,MAAMC,KAAKL,EAAMM,gBAAgBC,aAGpCC,EAAeT,aAAY,SAACC,GAChC,OAAOA,EAAMS,gBAhBF,EAmB6BC,mBAAS,IAnBtC,mBAmBNC,EAnBM,KAmBSC,EAnBT,OAqBiBF,mBAAiB,IArBlC,mBAqBNpC,EArBM,KAqBGuC,EArBH,OAuB2BH,mBACtCI,OAAOC,WA1BoB,KAEhB,mBAuBNC,EAvBM,KAuBQC,EAvBR,OA2B2BP,oBAAS,GA3BpC,mBA2BNQ,EA3BM,KA2BQC,EA3BR,KA6Bb,SAASC,IACH9C,EAAQ+C,SACoB,gBAA1B/C,EAAQgD,MAAM,KAAK,GACrB3D,EAAU4D,iBAAiBjD,EAAQgD,MAAM,KAAK,IACX,UAA1BhD,EAAQgD,MAAM,KAAK,GAC5B3D,EAAU6D,mBAAmBlD,EAAQgD,MAAM,KAAK,IAEhD3D,EAAUyD,YAAY9C,GAGxBuC,EAAW,KA6Bf,SAASY,IACHX,OAAOC,WAvEgB,IAwEzBE,GAAgB,GAEhBA,GAAgB,GAQpB,OArCA/B,qBAAU,WAGR,OAFA4B,OAAOY,iBAAiB,SAAUD,GAE3B,WACLX,OAAOa,oBAAoB,SAAUF,OAIzCvC,qBAAU,WACR0C,iBAAcC,eAAe,CAC3BC,YAAa,WACbC,QAAQ,EACRC,SAAU,IACVC,WAAW,OAIf/C,qBAAU,WACJsB,EAAa0B,OAAS,IACxBtB,EAAiBJ,GACjBzB,EFvEG,CACLK,KAAMP,GACNe,MAAO,KEsELuB,GAAgB,MAEjB,CAACpC,EAAUyB,IAeZ,kBAAC,EAAD,KACE,kBAAC,GAAD,MACCV,EAAYrB,UAAYd,EAAUE,OAAOsE,UACxC,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAMpB,GACZ,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAoB7B,IAEtB,kBAAC8B,EAAA,EAAD,KACE,kBAACzF,EAAA,EAAD,CAAQ0F,QAdpB,WACEvB,GAAgB,IAawBwB,MAAM,UAAUC,QAAQ,YAAtD,UAMJ,kBAAC,EAAD,CAAWC,WAAS,GAClB,kBAAC3F,EAAA,EAAD,CAAM4F,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC3B,kBAAC,EAAD,CAAQC,UAAW,IAChBlC,EACC,kBAAC,IAAMoB,SAAP,KACE,kBAAC,EAAD,CAASQ,QAAS,MAAlB,WACA,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACET,QAAS,UACTU,MAAO,CAAEC,gBAAiBzD,EAAYvB,SAErCuB,EAAYrB,SAAS,KAGzBuC,EACC,kBAACwC,EAAA,EAAD,CAAcC,QAAS3D,EAAYrB,WACjC,MAEN,kBAAC,EAAD,CAASmE,QAAS,MAAlB,WAEA,KACH1C,EAAYwD,KAAI,SAACnE,EAAMoE,GACtB,OACE,kBAACR,EAAA,EAAD,CAAUS,IAAKD,GACb,kBAACP,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACET,QAAS,UACTU,MAAO,CAAEC,gBAAiBhE,EAAKhB,SAE9BgB,EAAKd,SAAS,GAAGoF,gBAGrB7C,EACC,kBAACwC,EAAA,EAAD,CAAcC,QAASlE,EAAKd,WAC1B,WAMd,kBAACvB,EAAA,EAAD,CAAM4F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAC5B,kBAAC,EAAD,CAAWC,UAAW,GAAIY,GAAI,YAC5B,kBAAC,EAAD,KACGzE,EAASqE,KAAI,SAACK,EAAOJ,GACpB,OACE,kBAACR,EAAA,EAAD,CACES,IAAKD,EACLK,WAAW,aACXV,MACES,EAAMxE,KAAKd,WAAaqB,EAAYrB,SAChC,CAAEwF,UAAW,SACb,IAGLnE,EAAYrB,WAAasF,EAAMxE,KAAKd,SACnC,kBAAC2E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,gBAAiBQ,EAAMxE,KAAKhB,SAEpCwF,EAAMxE,KAAKd,SAAS,GAAGoF,gBAI5B,+BAEF,kBAACL,EAAA,EAAD,CACEC,QAASM,EAAMzF,QACf4F,UACE,kBAAC,IAAM9B,SAAP,KACG,IAAI+B,KAAKJ,EAAMK,WAAWC,iBACzB,KACF,kBAAC5G,EAAA,EAAD,CACE6G,UAAU,OACV1B,QAAQ,QACRD,MAAM,eAELoB,EAAMxE,KAAKd,qBAYlC,kBAAC,EAAD,CAAUoE,WAAS,GACjB,kBAAC3F,EAAA,EAAD,CAAM4F,MAAI,EAACC,GAAI,IACb,kBAAC,EAAD,CACEH,QAAS,WACTmB,MAAOzF,EACPiG,SAAU,SAAAC,GAAK,OAAI3D,EAAW2D,EAAMC,OAAOV,QAC3CW,WAAY,SAAAF,GACQ,UAAdA,EAAMZ,KACRxC,KAGJuD,YAAa,WAAa7E,EAAYrB,WAExC,kBAAC,EAAD,CACEmE,QAAS,YACTF,QAAStB,EACTuB,MAAO,WAEP,kBAAC,IAAD,UAMR,kBAAC,EAAD,KACE,kBAACiC,EAAA,EAAD,CAAkBjC,MAAO,YACzB,kBAAClF,EAAA,EAAD,qC,SClOUoH,QACW,cAA7B/D,OAAOgE,SAASC,UAEe,UAA7BjE,OAAOgE,SAASC,UAEhBjE,OAAOgE,SAASC,SAASC,MACvB,2D,ICWUC,G,kBAjBVC,GCGkBC,aAAgB,CACtClF,YCbyB,WAGf,IAFVD,EAES,uDAFK,IAAIxB,GAClB4G,EACS,uCACT,OACEA,EAAOhG,OAASV,IAChB0G,EAAOhG,OAASV,GAET0G,EAAO7F,KAEPS,GDITG,kBEX+B,WAGnB,IAFZH,EAEW,uDAFK,GAChBoF,EACW,uCACX,OACEA,EAAOhG,OAAST,IAChByG,EAAOhG,OAAST,GAETyB,MAAMC,KAAK+E,EAAO9F,OAElBU,GFETM,eGZ4B,WAGb,IAFfN,EAEc,uDAFK,GACnBoF,EACc,uCACd,OACEA,EAAOhG,OAASR,IAChBwG,EAAOhG,OAASR,GAETwB,MAAMC,KAAK+E,EAAO/F,UAElBW,GHGTS,aId0B,WAGd,IAFZT,EAEW,uDAFK,GAChBoF,EACW,uCACX,OACEA,EAAOhG,OAASP,IAChBuG,EAAOhG,OAASP,GAETuG,EAAOxF,MAEPI,KLDLqF,GAAmBC,wBAAa,CACpCC,UAAW,SAACC,EAAUJ,EAAQK,GAC5B,OAAQA,IAAiCA,EAA4B7F,OAEvE8F,UAAW,WACT,OAAO,GAET1D,UAAU,EACVoC,WAAW,EACXuB,MAAM,IAIFC,GAAeC,aAAaX,GAASY,aAAgBC,KAAiBV,KAE5DJ,GASTpF,GAREmG,IAASC,OACd,kBAAC,IAAD,CAAUL,MAAOA,IACf,kBAACX,GAAD,OAEFiB,SAASC,eAAe,SDyGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9G,GACL+G,QAAQ/G,MAAMA,EAAMtB,c","file":"static/js/main.0db09f67.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { Button, Grid, Paper, TextField, Typography } from \"@material-ui/core\";\n\nexport const Content = styled.div`\n  overflow-x: auto;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const InputText = styled(TextField)`\n  width: calc(100% - 64px);\n  height: 100%;\n`;\n\nexport const StyledButton = styled(Button)`\n  width: 56px;\n  height: 100%;\n`;\n\nexport const TopGrid = styled(Grid)`\n  height: calc(100vh - 56px);\n  display: flex;\n`;\n\nexport const Footer = styled(Grid)`\n  width: 100%;\n  height: 56px;\n`;\n\nexport const List = styled(Paper)`\n  height: calc(100vh - 56px - 16px);\n  width: calc(100% - 16px);\n  min-width: 72px;\n  margin: 8px;\n  overflow: auto;\n  vertical-align: top;\n`;\n\nexport const InverseList = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  flex-grow: 1;\n`;\n\nexport const Outside = styled(Paper)`\n  flex-direction: column;\n  overflow-y: auto;\n  display: flex;\n  height: calc(100vh - 56px - 16px);\n  width: calc(100% - 16px);\n  min-width: 72px;\n  margin: 8px;\n  vertical-align: top;\n`;\n\nexport const Title = styled(Typography)`\n  padding: 8px;\n`;\n\nexport const Loading = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: absolute;\n  top: 40%;\n  left: 50%;\n  transform: translate(-50%, -33%);\n  -webkit-transform: translate(-50%, -33%);\n`;\n","import socketIOClient from \"socket.io-client\";\nimport Cookies from \"js-cookie\";\n\nexport class SocketUtil {\n  private ENDPOINT = \"https://chatapp-73333.appspot.com\";\n  public socket: SocketIOClient.Socket;\n\n  constructor() {\n    this.socket = socketIOClient(this.ENDPOINT);\n    this.sendUserConnect();\n  }\n\n  public sendUserConnect() {\n    const cookie = Cookies.get(\"user\");\n    let username = \"\";\n    if (cookie) {\n      username = cookie;\n    }\n\n    this.socket.emit(\"user_connect\", username);\n  }\n\n  public sendMessage(message: string) {\n    this.socket.emit(\"message\", message);\n  }\n\n  public sendUserNameChange(username: string) {\n    this.socket.emit(\"username_change\", username);\n  }\n\n  public sendColourChange(colour: string) {\n    this.socket.emit(\"user_colour_change\", colour);\n  }\n}\n\nexport const socketObj = new SocketUtil();\n","export class User {\n  nickname: string = \"\";\n  colour: string = \"\";\n}\n","import { User } from \"../models/User\";\nimport { Action } from \"redux\";\n\nexport const USER_ACTION_CONSTANTS = {\n  UPDATE_USER: \"UPDATE_USER\",\n  RESET_USER: \"RESET_USER\"\n};\n\nexport type UserActionType = {\n  user: User;\n} & Action;\n\nexport function updateUserAction(user: User) {\n  return {\n    type: USER_ACTION_CONSTANTS.UPDATE_USER,\n    user: user\n  };\n}\n\nexport function resetUserAction() {\n  return {\n    type: USER_ACTION_CONSTANTS.RESET_USER,\n    user: new User()\n  };\n}\n","import { User } from \"../models/User\";\nimport { Action } from \"redux\";\n\nexport const ONLINE_USERS_ACTION_CONSTANTS = {\n  UPDATE_ONLINE_USERS: \"UPDATE_ONLINE_USERS\",\n  RESET_ONLINE_USERS: \"RESET_ONLINE_USERS\"\n};\n\nexport type OnlineUsersActionType = {\n  users: User[];\n} & Action;\n\nexport function updateOnlineUsersAction(users: User[]) {\n  return {\n    type: ONLINE_USERS_ACTION_CONSTANTS.UPDATE_ONLINE_USERS,\n    users\n  };\n}\n\nexport function resetOnlineUsersAction() {\n  return {\n    type: ONLINE_USERS_ACTION_CONSTANTS.RESET_ONLINE_USERS,\n    users: []\n  };\n}\n","import { Message } from \"../models/Message\";\nimport { Action } from \"redux\";\n\nexport const MESSAGE_ACTION_CONSTANTS = {\n  UPDATE_MESSAGES: \"UPDATE_MESSAGES\",\n  RESET_MESSAGES: \"RESET_MESSAGES\"\n};\n\nexport type MessageActionType = {\n  messages: Message[];\n} & Action;\n\nexport function updateMessageAction(messages: Message[]) {\n  return {\n    type: MESSAGE_ACTION_CONSTANTS.UPDATE_MESSAGES,\n    messages: messages\n  };\n}\n\nexport function resetMessageAction() {\n  return {\n    type: MESSAGE_ACTION_CONSTANTS.RESET_MESSAGES,\n    messages: []\n  };\n}\n","import { Action } from \"redux\";\n\nexport const ERROR_ACTION_CONSTANTS = {\n  UPDATE_ERROR: \"UPDATE_ERROR\",\n  RESET_ERROR: \"RESET_ERROR\"\n};\n\nexport type ErrorActionType = {\n  error: string;\n} & Action;\n\nexport function updateErrorAction(error: string) {\n  return {\n    type: ERROR_ACTION_CONSTANTS.UPDATE_ERROR,\n    error: error\n  };\n}\n\nexport function resetErrorAction() {\n  return {\n    type: ERROR_ACTION_CONSTANTS.RESET_ERROR,\n    error: \"\"\n  };\n}\n","import React, { useEffect } from \"react\";\nimport { socketObj } from \"../utils/SocketUtil\";\nimport { useDispatch } from \"react-redux\";\nimport { User } from \"../redux/models/User\";\nimport {\n  resetUserAction,\n  updateUserAction\n} from \"../redux/actions/UserActions\";\nimport {\n  resetOnlineUsersAction,\n  updateOnlineUsersAction\n} from \"../redux/actions/OnlineUsersActions\";\nimport {\n  resetMessageAction,\n  updateMessageAction\n} from \"../redux/actions/MessageActions\";\nimport { Message } from \"../redux/models/Message\";\nimport Cookies from \"js-cookie\";\nimport { updateErrorAction } from \"../redux/actions/ErrorActions\";\n\nexport const SocketContainer = (): JSX.Element => {\n  const dispatch = useDispatch();\n\n  const mySocket = socketObj.socket;\n\n  useEffect(() => {\n    mySocket.on(\"reconnect\", () => {\n      socketObj.sendUserConnect();\n    });\n\n    mySocket.on(\"disconnect\", () => {\n      dispatch(resetMessageAction());\n      dispatch(resetOnlineUsersAction());\n      dispatch(resetUserAction());\n    });\n\n    mySocket.on(\"personal_info\", (msg: User) => {\n      Cookies.set(\"user\", msg.nickname);\n      dispatch(updateUserAction(msg));\n    });\n\n    mySocket.on(\"global_info\", (msg: User[]) => {\n      dispatch(updateOnlineUsersAction(msg));\n    });\n\n    mySocket.on(\"message\", (messages: Message[]) => {\n      dispatch(updateMessageAction(messages));\n    });\n\n    mySocket.on(\"error_msg\", (error_msg: string) => {\n      dispatch(updateErrorAction(error_msg));\n    });\n  }, [dispatch, mySocket]);\n\n  return <div />;\n};\n","import React, { useEffect, useState } from \"react\";\nimport * as S from \"./App.styles\";\nimport {\n  Grid,\n  Typography,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  CircularProgress,\n  Dialog,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button\n} from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { socketObj } from \"../../utils/SocketUtil\";\nimport { SocketContainer } from \"../../containers/SocketContainer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ReduxState } from \"../../redux/combindedReducer\";\nimport { User } from \"../../redux/models/User\";\nimport { animateScroll } from \"react-scroll\";\nimport { resetErrorAction } from \"../../redux/actions/ErrorActions\";\n\nexport const MIN_WINDOW_SIZE = 950;\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const currentUser: User = useSelector((state: ReduxState) => {\n    return state.userReducer;\n  });\n\n  const onlineUsers = useSelector((state: ReduxState) => {\n    return state.onlineUserReducer;\n  });\n\n  const messages = useSelector((state: ReduxState) => {\n    return Array.from(state.messageReducer).reverse();\n  });\n\n  const errorMessage = useSelector((state: ReduxState) => {\n    return state.errorReducer;\n  });\n\n  const [dialogMessage, setDialogMessage] = useState(\"\");\n\n  const [message, setMessage] = useState<string>(\"\");\n\n  const [isMobileSize, setIsMobileSize] = useState<boolean>(\n    window.innerWidth > MIN_WINDOW_SIZE\n  );\n\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  function sendMessage() {\n    if (message.trim()) {\n      if (message.split(\" \")[0] === \"/nickcolour\") {\n        socketObj.sendColourChange(message.split(\" \")[1]);\n      } else if (message.split(\" \")[0] === \"/nick\") {\n        socketObj.sendUserNameChange(message.split(\" \")[1]);\n      } else {\n        socketObj.sendMessage(message);\n      }\n\n      setMessage(\"\");\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWindowSize);\n\n    return () => {\n      window.removeEventListener(\"resize\", updateWindowSize);\n    };\n  });\n\n  useEffect(() => {\n    animateScroll.scrollToBottom({\n      containerId: \"chat-log\",\n      smooth: true,\n      duration: 100,\n      isDynamic: true\n    });\n  });\n\n  useEffect(() => {\n    if (errorMessage.length > 0) {\n      setDialogMessage(errorMessage);\n      dispatch(resetErrorAction());\n      setIsDialogOpen(true);\n    }\n  }, [dispatch, errorMessage]);\n\n  function updateWindowSize() {\n    if (window.innerWidth < MIN_WINDOW_SIZE) {\n      setIsMobileSize(false);\n    } else {\n      setIsMobileSize(true);\n    }\n  }\n\n  function closeDialog() {\n    setIsDialogOpen(false);\n  }\n\n  return (\n    <S.Content>\n      <SocketContainer />\n      {currentUser.nickname && socketObj.socket.connected ? (\n        <React.Fragment>\n          <Dialog open={isDialogOpen}>\n            <DialogContent>\n              <DialogContentText>{dialogMessage}</DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={closeDialog} color=\"primary\" variant=\"outlined\">\n                Okay\n              </Button>\n            </DialogActions>\n          </Dialog>\n\n          <S.TopGrid container>\n            <Grid item xs={3} sm={2} md={3}>\n              <S.List elevation={10}>\n                {isMobileSize ? (\n                  <React.Fragment>\n                    <S.Title variant={\"h5\"}>Profile</S.Title>\n                    <ListItem>\n                      <ListItemAvatar>\n                        <Avatar\n                          variant={\"rounded\"}\n                          style={{ backgroundColor: currentUser.colour }}\n                        >\n                          {currentUser.nickname[0]}\n                        </Avatar>\n                      </ListItemAvatar>\n                      {isMobileSize ? (\n                        <ListItemText primary={currentUser.nickname} />\n                      ) : null}\n                    </ListItem>\n                    <S.Title variant={\"h5\"}>Online</S.Title>\n                  </React.Fragment>\n                ) : null}\n                {onlineUsers.map((user, index) => {\n                  return (\n                    <ListItem key={index}>\n                      <ListItemAvatar>\n                        <Avatar\n                          variant={\"rounded\"}\n                          style={{ backgroundColor: user.colour }}\n                        >\n                          {user.nickname[0].toUpperCase()}\n                        </Avatar>\n                      </ListItemAvatar>\n                      {isMobileSize ? (\n                        <ListItemText primary={user.nickname} />\n                      ) : null}\n                    </ListItem>\n                  );\n                })}\n              </S.List>\n            </Grid>\n            <Grid item xs={9} sm={10} md={9}>\n              <S.Outside elevation={10} id={\"chat-log\"}>\n                <S.InverseList>\n                  {messages.map((value, index) => {\n                    return (\n                      <ListItem\n                        key={index}\n                        alignItems=\"flex-start\"\n                        style={\n                          value.user.nickname === currentUser.nickname\n                            ? { textAlign: \"right\" }\n                            : {}\n                        }\n                      >\n                        {currentUser.nickname !== value.user.nickname ? (\n                          <ListItemAvatar>\n                            <Avatar\n                              style={{ backgroundColor: value.user.colour }}\n                            >\n                              {value.user.nickname[0].toUpperCase()}\n                            </Avatar>\n                          </ListItemAvatar>\n                        ) : (\n                          <span />\n                        )}\n                        <ListItemText\n                          primary={value.message}\n                          secondary={\n                            <React.Fragment>\n                              {new Date(value.timestamp).toLocaleString() +\n                                \": \"}\n                              <Typography\n                                component=\"span\"\n                                variant=\"body2\"\n                                color=\"textPrimary\"\n                              >\n                                {value.user.nickname}\n                              </Typography>\n                            </React.Fragment>\n                          }\n                        />\n                      </ListItem>\n                    );\n                  })}\n                </S.InverseList>\n              </S.Outside>\n            </Grid>\n          </S.TopGrid>\n          <S.Footer container>\n            <Grid item xs={12}>\n              <S.InputText\n                variant={\"outlined\"}\n                value={message}\n                onChange={event => setMessage(event.target.value)}\n                onKeyPress={event => {\n                  if (event.key === \"Enter\") {\n                    sendMessage();\n                  }\n                }}\n                placeholder={\"Welcome \" + currentUser.nickname}\n              />\n              <S.StyledButton\n                variant={\"contained\"}\n                onClick={sendMessage}\n                color={\"primary\"}\n              >\n                <SendIcon />\n              </S.StyledButton>\n            </Grid>\n          </S.Footer>\n        </React.Fragment>\n      ) : (\n        <S.Loading>\n          <CircularProgress color={\"primary\"} />\n          <Typography>Waiting for connection...</Typography>\n        </S.Loading>\n      )}\n    </S.Content>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Reducer } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport thunkMiddleware from \"redux-thunk\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, Store } from \"redux\";\nimport { LogEntryObject, createLogger } from \"redux-logger\";\nimport combinedReducer, { ReduxState } from \"./redux/combindedReducer\";\nimport { Provider } from \"react-redux\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst reducer: Reducer<ReduxState, any> = combinedReducer;\n\nconst loggerMiddleware = createLogger({\n  collapsed: (getState, action, logEntry?: LogEntryObject) => {\n    return (logEntry as LogEntryObject) && !(logEntry as LogEntryObject).error;\n  },\n  predicate: () => {\n    return true;\n  },\n  duration: true,\n  timestamp: false,\n  diff: true\n});\n\n// @ts-ignore\nconst store: Store = createStore( reducer, applyMiddleware(thunkMiddleware, loggerMiddleware));\n\nconst render = (Component: any): void => {\n  return ReactDOM.render(\n    <Provider store={store}>\n      <Component />\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n};\n\nrender(App);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { combineReducers } from \"redux\";\nimport { userReducer } from \"./reducers/UserReducer\";\nimport { User } from \"./models/User\";\nimport { onlineUserReducer } from \"./reducers/OnlineUsersReducer\";\nimport { messageReducer } from \"./reducers/MessageReducer\";\nimport { Message } from \"./models/Message\";\nimport { errorReducer } from \"./reducers/ErrorReducer\";\n\nexport interface ReduxState {\n  userReducer: User;\n  onlineUserReducer: User[];\n  messageReducer: Message[];\n  errorReducer: string;\n}\n\nconst combinedReducer = combineReducers({\n  userReducer,\n  onlineUserReducer,\n  messageReducer,\n  errorReducer\n});\n\nexport default combinedReducer;\n","import { User } from \"../models/User\";\nimport { USER_ACTION_CONSTANTS, UserActionType } from \"../actions/UserActions\";\n\nexport const userReducer = (\n  state: User = new User(),\n  action: UserActionType\n): User => {\n  if (\n    action.type === USER_ACTION_CONSTANTS.UPDATE_USER ||\n    action.type === USER_ACTION_CONSTANTS.RESET_USER\n  ) {\n    return action.user;\n  } else {\n    return state;\n  }\n};\n","import { User } from \"../models/User\";\nimport {\n  ONLINE_USERS_ACTION_CONSTANTS,\n  OnlineUsersActionType\n} from \"../actions/OnlineUsersActions\";\n\nexport const onlineUserReducer = (\n  state: User[] = [],\n  action: OnlineUsersActionType\n): User[] => {\n  if (\n    action.type === ONLINE_USERS_ACTION_CONSTANTS.UPDATE_ONLINE_USERS ||\n    action.type === ONLINE_USERS_ACTION_CONSTANTS.RESET_ONLINE_USERS\n  ) {\n    return Array.from(action.users);\n  } else {\n    return state;\n  }\n};\n","import { Message } from \"../models/Message\";\nimport {\n  MESSAGE_ACTION_CONSTANTS,\n  MessageActionType\n} from \"../actions/MessageActions\";\n\nexport const messageReducer = (\n  state: Message[] = [],\n  action: MessageActionType\n): Message[] => {\n  if (\n    action.type === MESSAGE_ACTION_CONSTANTS.UPDATE_MESSAGES ||\n    action.type === MESSAGE_ACTION_CONSTANTS.RESET_MESSAGES\n  ) {\n    return Array.from(action.messages);\n  } else {\n    return state;\n  }\n};\n","import {\n  ERROR_ACTION_CONSTANTS,\n  ErrorActionType\n} from \"../actions/ErrorActions\";\n\nexport const errorReducer = (\n  state: string = \"\",\n  action: ErrorActionType\n): string => {\n  if (\n    action.type === ERROR_ACTION_CONSTANTS.UPDATE_ERROR ||\n    action.type === ERROR_ACTION_CONSTANTS.RESET_ERROR\n  ) {\n    return action.error;\n  } else {\n    return state;\n  }\n};\n"],"sourceRoot":""}